.\" $Id: nipasswd.8,v 1.6 2002/08/24 07:15:35 chip Exp $
.TH NIPASSWD 8L
.SH NAME
nipasswd - Non-interactive password utility for PAM systems.
.SH SYNTAX
.B nipasswd
[
.B \-Dac
]
.SH DESCRIPTION
The
.I nipasswd
utility is a non-interactive program to authenticate users or change
account passwords.  It is intended to provide these capabilities--normally
privileged operations--to other scripts and programs in a moderately
safe and secure fashion.
.P
By default,
.I nipasswd
attempts to change the password on a user account.  At startup, it reads
three lines of input from stdin:
.RS
.P
.nf
username
old_password
new_password
.fi
.RE
.P
It first verifies that the
.I old_password
is correct for the
.I username
account, and then attempts to change it to
.IR new_password .
.P
If the
.B \-c
option is given, bad password checks are enabled and the new password
will be denied if those checks fail.  If this option is not specified
then the results of the bad password checks are suppressed.
.P
If the
.B \-a
option is given, then
.I nipasswd
changes to authenticate mode.  In this mode, it reads just two lines
from stdin (\fIusername\fP and \fIpassword\fP) and attempts to authenticate
the user.
.P
The
.B \-D
option enables debug output.
.P
A minimum UID is enforced, as controlled by the MIN_AUTH_UID and
MIN_CHANGE_UID values compiled into the program.  An attempt to authorize
a user or change a password for an account below these limits will
be denied.  In the distributed version of this program, both values are
set to 100.
.P
This utility operates under
the
.IR pam (8)
system, using a service name of "nipasswd".
.SH EXIT STATUS
.IP 0 4
Password has been successfully changed.
.IP 1 4
Failure due to some error.  Password unchanged.
.IP 2 4
Failure due to authorization error.  Either the
.I username
does not exist, the
.I old_password
is incorrect, or the UID of this
account below the minimum permitted.  Password unchanged.
.IP 3 4
Failure due to bad password checks.  This will occur only when the
.B \-c
option is given.  Password unchanged.
.P
In the case of non-zero exit status, a diagnostic message will be
written to the output.
.SH FILES
/etc/pam.d/nipass
.SH BUGS
This utility does not implement any guards against dictionary attacks on
account passwords, other than invoking a delay penalty on authentication
failures.
.P
This utility is intentionally ambiguous as to whether an authentication
failure is due to a non-existent username or bad password.  This helps
prevent fishing for valid accounts.
.P
If you enforce a "bad passwords not allowed" policy on your system, then
you should ensure this utility is not available to users.  Otherwise, they
will be able to circumvent that policy.
.P
The PAM abstraction model is completely wrong for an application such
as this.  Coded into this utility is knowledge of the prompting sequence
that PAM uses for authentication and password changing.  That sequence,
however, could easily change, say under a different module stack.
If that happens, this utility will break.  This completely defeats the
purpose of abstracting the authentication process.  It's hard to imagine
how anybody thought this would be a good idea.
.P
This utility assumes the bad password checks are implemented by PAM.
It also assumes that a bad password is signaled by a PAM_ERROR_MSG
following initial entry of the new password.
.SH AUTHOR
.nf
Chip Rosenthal
Unicom Systems Development
<chip@unicom.com>

This file is part of the "web-chpass" package.
See <https://github.com/chip-rosenthal/web-chpass> for more information.
.fi
.SH SEE ALSO
pam(8), passwd(1)
